import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.regex.*;

public class Main {

    public static void main(String[] args) {
        List<Customer> custList = new ArrayList<>();
        List<Item> foodList = new ArrayList<>();
        Cart cart = new Cart();
        foodList = initialFood(foodList);
        custList = initialCust(custList);
        Scanner scanner = new Scanner(System.in);
        String option;

        //main menu
        do {
            System.out.println("\n\nWelcome to Online Catering System");
            System.out.println("---------------------------------");
            System.out.println("1. Register");
            System.out.println("2. Login");
            System.out.println("3. View Menu");
            System.out.println("4. Add Cart");
            System.out.println("5. View Cart");
            System.out.println("6. Exit");
            System.out.print("\nPlease enter your option: ");
            option = scanner.nextLine();

            if (option.equals("1")) {
                custList = register(custList);
            } else if (option.equals("2")) {
                login(custList);
            } else if (option.equals("3")) {
                viewMenu(foodList);
            } else if (option.equals("4")) {
                addCart(foodList, cart);
            } else if (option.equals("5")) {
                viewCart(cart);
            } else {
                System.out.println("** No such option **");
            }
        } while (!option.equals("6"));
    }

    public static List<Customer> initialCust(List<Customer> custList) {
        Customer cust1 = new Customer("Phoon Winig Yan", "phoon5932@hotmail.com", "0166556158", "KL", new Account("wingyan123", "wingyan123", "active"));
        Customer cust2 = new Customer("Pey Hui Shan", "huishan123@hotmail.com", "0143387902", "Penang", new Account("huishan123", "huishan123", "inactive"));
        Customer cust3 = new Customer("Lim Xin Le", "xinle123@hotmail.com", "0149963256", "Johor", new Account("xinle123", "xinle123", "active"));
        custList.add(cust1);
        custList.add(cust2);
        custList.add(cust3);
        return custList;
    }

    public static List<Item> initialFood(List<Item> foodList) {
        Item food1 = new Item("F001", "Fry Rice", 13.5, "Food");
        Item food2 = new Item("F002", "Chicken Rice", 22.5, "Food");
        Item food3 = new Item("F003", "Mee Goreng", 10.0, "Food");
        Item beverage1 = new Item("B001", "Green tea", 2.5, "Beverage");
        Item beverage2 = new Item("B002", "Lemon juice", 6.5, "Beverage");
        Item beverage3 = new Item("B003", "Bubble tea", 8.5, "Beverage");
        Item dessert1 = new Item("D001", "Oreo Cake", 11.9, "Dessert");
        Item dessert2 = new Item("D002", "Baked cheesecake", 13.9, "Dessert");
        Item dessert3 = new Item("D003", "Matcha Cake", 11.9, "Dessert");

        food2.setAvailability(Boolean.FALSE);
        beverage2.setAvailability(Boolean.FALSE);

        foodList.add(food1);
        foodList.add(food2);
        foodList.add(food3);
        foodList.add(beverage1);
        foodList.add(beverage2);
        foodList.add(beverage3);
        foodList.add(dessert1);
        foodList.add(dessert2);
        foodList.add(dessert3);

        return foodList;
    }

    //register function
    public static List<Customer> register(List<Customer> custList) {

        //create variable needed
        String enteredUN, enteredPS, enteredName, enteredPhone, enteredEmail, enteredAdd, enteredPS2, confirmation;
        Scanner scanner = new Scanner(System.in);

        //ask for input
        System.out.println("Welcome to REGISTER");
        System.out.println("-------------------");
        do {
            System.out.print("Name: ");
            enteredName = scanner.nextLine();

            //show error message if invalid
            if (enteredName.isEmpty()) {
                System.out.println("** Please fill in the field **");
            } else if (!validateName(enteredName)) {
                System.out.println("** Invalid name. Name can only contain alphabets and spaces, at least 4 characters **");
            }
        } while (!validateName(enteredName));

        do {
            System.out.print("Email: ");
            enteredEmail = scanner.nextLine();

            //show error message if invalid
            if (enteredEmail.isEmpty()) {
                System.out.println("** Please fill in the field **");
            } else if (!validateEmail(enteredEmail)) {
                System.out.println("** Invalid email. Email must contain '@' and '.' **");
            }
        } while (!validateEmail(enteredEmail));

        do {
            System.out.print("Phone number (without -): ");
            enteredPhone = scanner.nextLine();

            //show error message if invalid
            if (enteredPhone.isEmpty()) {
                System.out.println("** Please fill in the field **");
            } else if (!validatePhoneNum(enteredPhone)) {
                System.out.println("** Invalid phone number. Phone number can only contain 10 or 11 digits and start with '01' **");
            }
        } while (!validatePhoneNum(enteredPhone));

        do {
            System.out.print("Address: ");
            enteredAdd = scanner.nextLine();

            //show error message if invalid
            if (enteredAdd.isEmpty()) {
                System.out.println("** Please fill in the field **");
            } else if (!validateAddress(enteredAdd)) {
                System.out.println("** Invalid address. Address must at least 4 characters **");
            }
        } while (!validateAddress(enteredAdd));

        do {
            System.out.print("Username: ");
            enteredUN = scanner.nextLine();

            //show error message if invalid
            if (enteredUN.isEmpty()) {
                System.out.println("** Please fill in the field **");
            } else if (!validateUsername(enteredUN)) {
                System.out.println("** Invalid username. Username can only contain alphabets and digits, at least 4 characters **");
            } else if (!validateExistedUsername(enteredUN, custList)) {
                System.out.println("** Username existed. **");
            }

        } while (!validateUsername(enteredUN) || !validateExistedUsername(enteredUN, custList));

        do {
            do {
                System.out.print("Password: ");
                enteredPS = scanner.nextLine();

                //show error message if invalid
                if (enteredPS.isEmpty()) {
                    System.out.println("** Please fill in the field **");
                } else if (!validatePS(enteredPS)) {
                    System.out.println("** Invalid password. Password must has lower case, upper case and digit, at least 4 characters **");
                }
            } while (!validatePS(enteredPS));

            System.out.print("Re-enter password: ");
            enteredPS2 = scanner.nextLine();

            //show error message if invalid
            if (enteredPS.isEmpty()) {
                System.out.println("** Please fill in the field **");
            } else if (!validateRPS(enteredPS, enteredPS2)) {
                System.out.println("** The password entered do not match, you have to reset the password again **");
            }
        } while (!validateRPS(enteredPS, enteredPS2));

        do {
            System.out.print("\nConfirm to register? (Y/N): ");
            confirmation = scanner.nextLine();

            if (!confirmation.equalsIgnoreCase("Y") && !confirmation.equalsIgnoreCase("N")) {
                System.out.println("** Invalid input. Please only enter 'Y' or 'N' **");
            }
        } while (!confirmation.equalsIgnoreCase("Y") && !confirmation.equalsIgnoreCase("N"));

        if (confirmation.equalsIgnoreCase("Y")) {
            System.out.print("\n** Register successfully! Please proceed with account activation **");

            //create new acc and new cust
            Account newAcc = new Account(enteredUN, enteredPS, "inactive");
            Customer newCust = new Customer(enteredName, enteredEmail, enteredPhone, enteredAdd, newAcc);

            //add into list custList
            custList.add(newCust);
        }
        return custList;
    }

    //login function
    public static void login(List<Customer> custList) {

        //create variable needed
        String enteredUN, enteredPS;
        Scanner scanner = new Scanner(System.in);

        //ask for input
        System.out.println("Welcome to LOGIN");
        System.out.println("-----------------");
        do {
            System.out.print("Username: ");
            enteredUN = scanner.nextLine();
            System.out.print("Password: ");
            enteredPS = scanner.nextLine();

            if (enteredPS.isEmpty() || enteredUN.isEmpty()) {
                System.out.print("** Please fill in the username and password **\n\n");
            } else if (!validateAccount(enteredUN, enteredPS, custList)) {
                System.out.print("** The username or password is incorrect, please try again **\n\n");
            } else if (!validateActiveAcc(enteredUN, enteredPS, custList)) {
                System.out.print("** This account is inactive, please activate it before login **\n\n");
            }
        } while (!validateAccount(enteredUN, enteredPS, custList) || !validateActiveAcc(enteredUN, enteredPS, custList));

        System.out.print("\n** Login successfully! **");

    }

    //add cart function
    public static void addCart(List<Item> foodList, Cart cart) {
        Scanner kb = new Scanner(System.in);

        String choice, quantity;
        String ans = null;
        Item itemFound = new Item();
        boolean valid = false;

        do {
            do {
                System.out.print("Plese enter the item ID: ");
                choice = kb.nextLine();

                int found = 0;
                int available = 0;

                for (Item item : foodList) {
                    if (choice.equalsIgnoreCase(item.getItemID())) {
                        found++;
                        if (item.getAvailability()) {
                            available++;
                            itemFound = item;
                        }
                    }
                }

                if (found == 0) {
                    System.out.println("** Invalid input, please enter again **\n");
                } else if (available == 0) {
                    System.out.println("** The item is out of stock, please enter others **\n");
                } else {
                    valid = true;
                    do {
                        System.out.print("Please enter quantity: ");
                        quantity = kb.nextLine();

                        if (!validateQuantity(quantity)) {
                            System.out.println("** Invalid quantity, please enter again **\n");
                        }
                    } while (!validateQuantity(quantity));

                    cart.addItem(new OrderItem(itemFound, Integer.parseInt(quantity)));
                    System.out.println("** Added successfully! **");
                    System.out.print("\nDo you want to add more? (Y = yes): ");
                    ans = kb.nextLine();
                }

            } while (!valid);
        } while (ans.equals("Y"));
    }

    //view cart function
    public static void viewCart(Cart cart) {
        double totalAmount = 0;

        if (!cart.isEmpty()) {
            System.out.println("\n                                 My Cart                                ");
            System.out.println("========================================================================");
            System.out.println("| Item ID |        Item Name       | Quantity | Unit Price | Sub-Total |");
            System.out.println("========================================================================");

            for (OrderItem orderItem : cart.getItemList()) {
                System.out.printf("|  %5s  |       %-17s|%5d     |   %3.2f    |%8.2f   |\n", orderItem.getItem().getItemID(), orderItem.getItem().getItemName(), orderItem.getQuantity(), orderItem.getItem().getItemPrice(), orderItem.getSubtotal());
                totalAmount += orderItem.getSubtotal();
            }

            System.out.println("========================================================================");
            System.out.printf("|            Total amount in cart                           RM %3.2f   |\n", totalAmount);
            System.out.println("========================================================================");
        } else {

            System.out.println("\n** Currently no item in the cart **");

        }
    }

    //view menu function
    public static void viewMenu(List<Item> foodList) {
        Scanner kb = new Scanner(System.in);

        String choice;
        // TODO code application logic here
        do {
            do {
                System.out.println("\n++================================++");
                System.out.println("||              MENU              ||");
                System.out.println("||--------------------------------||");
                System.out.println("|| 1. Food                        ||");
                System.out.println("|| 2. Beverage                    ||");
                System.out.println("|| 3. Dessert                     ||");
                System.out.println("|| 4. Exit                        ||");
                System.out.println("++================================++");
                System.out.print("Enter your choice (1-3):");
                choice = kb.nextLine();

                if (!choice.equals("1") && !choice.equals("2") && !choice.equals("3") && !choice.equals("4")) {
                    System.out.println("** Invalid Input! Please Enter Again! **\n");
                }
            } while (!choice.equals("1") && !choice.equals("2") && !choice.equals("3") && !choice.equals("4"));

            if (choice.equals("1")) {
                System.out.println("\n||-------------------------------------------------------------------------||");
                System.out.println("||              FOOD                         |          PRICE (RM)         ||");
                System.out.println("||-------------------------------------------------------------------------||");
                for (Item food : foodList) {
                    if (food.getCategory().equalsIgnoreCase("food")) {
                        System.out.printf("|| %s. %-36s|%27.2f  || \n", food.getItemID(), food.getItemName(), food.getItemPrice());
                    }
                }
                System.out.println("||-------------------------------------------------------------------------||");

            } else if (choice.equals("2")) {
                System.out.println("||------------------------------------------------------------------------||");
                System.out.println("||              DRINK                       |          PRICE (RM)         ||");
                System.out.println("||------------------------------------------------------------------------||");
                for (Item food : foodList) {
                    if (food.getCategory().equalsIgnoreCase("beverage")) {
                        System.out.printf("|| %s. %-35s|%27.2f  || \n", food.getItemID(), food.getItemName(), food.getItemPrice());
                    }
                }
                System.out.println("||------------------------------------------------------------------------||");

            } else if (choice.equals("3")) {
                System.out.println("||------------------------------------------------------------------------||");
                System.out.println("||              DESSERT                      |          PRICE (RM)        ||");
                System.out.println("||------------------------------------------------------------------------||");
                for (Item food : foodList) {
                    if (food.getCategory().equalsIgnoreCase("dessert")) {
                        System.out.printf("|| %s. %-36s|%26.2f  || \n", food.getItemID(), food.getItemName(), food.getItemPrice());
                    }
                }
                System.out.println("||------------------------------------------------------------------------||");

            } else if (choice.equals("4")) {

            }
        } while (!choice.equals("4"));
    }

//method for validation
    public static boolean validateQuantity(String quantity) {
        if (quantity.isEmpty()) {
            return false;
        }

        //check are all digits?
        for (int i = 0; i < quantity.length(); i++) {
            if (Character.isDigit(quantity.charAt(i)) == false) {
                return false;
            }
        }

        int quan = Integer.parseInt(quantity);

        if (quan < 1) {
            return false;
        }

        return true;
    }

    public static boolean validateAccount(String enteredUN, String enteredPS, List<Customer> custList) {
        for (Customer cust : custList) {
            if (cust.getAcc().getUsername().equals(enteredUN)) {
                if (cust.getAcc().getPassword().equals(enteredPS)) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean validateActiveAcc(String enteredUN, String enteredPS, List<Customer> custList) {
        for (Customer cust : custList) {
            if (cust.getAcc().getUsername().equals(enteredUN)) {
                if (cust.getAcc().getPassword().equals(enteredPS)) {
                    if (cust.getAcc().getStatus().equalsIgnoreCase("active")) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public static boolean validateName(String name) {
        //check length
        if (name.length() < 4) {
            return false;
        }

        //check is letter or space? (no digit and special character allowed)
        for (int i = 0; i < name.length(); i++) {
            if (Character.isLetter(name.charAt(i)) == false && name.charAt(i) != ' ') {
                return false;
            }
        }
        return true;
    }

    public static boolean validateEmail(String email) {
        //check the pattern of email
        String emailRegex = "^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$";
        Pattern emailPat = Pattern.compile(emailRegex, Pattern.CASE_INSENSITIVE);
        Matcher matcher = emailPat.matcher(email);
        return matcher.find();
    }

    public static boolean validatePhoneNum(String phoneNum) {
        //check length
        if (phoneNum.length() != 10 && phoneNum.length() != 11) {
            return false;
        }

        //check are all digits?
        for (int i = 0; i < phoneNum.length(); i++) {
            if (Character.isDigit(phoneNum.charAt(i)) == false) {
                return false;
            }
        }

        //check start with 0? check second digit is 1?
        if (phoneNum.charAt(0) != '0' || phoneNum.charAt(1) != '1') {
            return false;
        }

        return true;
    }

    public static boolean validateAddress(String add) {
        //check length
        if (add.length() < 4) {
            return false;
        }
        return true;
    }

    public static boolean validateUsername(String username) {
        //check length
        if (username.length() < 4) {
            return false;
        }

        //check is letter or digit? (no space and special character allowed)
        for (int i = 0; i < username.length(); i++) {
            if (Character.isLetter(username.charAt(i)) == false && Character.isDigit(username.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }

    public static boolean validateExistedUsername(String username, List<Customer> custList) {

        for (Customer cust : custList) {
            if (cust.getAcc().getUsername().equals(username)) {
                return false;
            }
        }

        return true;
    }

    public static boolean validatePS(String password) {
        if (password.length() > 5) {    //check length
            if (valPass(password)) {    //check validation
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public static boolean valPass(String password) {
        boolean hasNum = false;
        boolean hasCap = false;
        boolean hasLow = false;
        char c;
        for (int i = 0; i < password.length(); i++) {
            c = password.charAt(i);
            if (Character.isDigit(c)) {
                hasNum = true;                          // check has num?
            } else if (Character.isUpperCase(c)) {
                hasCap = true;                          // check has Upper Case?
            } else if (Character.isLowerCase(c)) {
                hasLow = true;                          // check has Lower Case?
            }
            if (hasNum && hasCap && hasLow) {           // if all yes then true
                return true;
            }

        }
        return false;
    }

    public static boolean validateRPS(String ps1, String ps2) {

        if (!ps2.equals(ps1)) {
            return false;
        }

        return true;
    }
}
