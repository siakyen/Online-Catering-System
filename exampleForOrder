package agile;

import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class exampleForOrder {

    //the main method
    public static void main(String[] args) {
        List<Order> orderList = new ArrayList<>();
        List<Item> foodList = new ArrayList<>();
        initialFood(foodList);
        initialOrder(orderList, foodList);

        //call your own method here
        viewOrderhistory(orderList);
        searchOrderhistory(orderList);
    }

    public static void searchOrderhistory(List<Order> orderList) {
        Scanner kb = new Scanner(System.in);
        boolean found = false;
        int day, month, year;
        String dayS, yearS, monthS;
        boolean validation = false;

        if (orderList.isEmpty()) {
            System.out.println("\t    There is no any order made");
        } else {

            System.out.println("Please enter date to search the order history");
            do {
                System.out.printf("Day: ");
                dayS = kb.nextLine();
                if (dayS.isEmpty()) {
                    validation = false;
                    System.out.println("\nPlease fill in the day ");
                } else if (validation == false) {
                    validation = validateDay(dayS);
                    if (validateDay(dayS)) {
                        System.out.println("\nInvalid Date Format");
                    }
                }
            } while (validation == false);

            do {
                System.out.printf("Month: ");
                monthS = kb.nextLine();
                if (monthS.isEmpty()) {
                    validation = false;
                    System.out.println("\nPlease fill in the month ");
                } else if (validation == false) {
                    validation = validateMonth(dayS, monthS);
                    System.out.println("\nInvalid Date Format");
                }
            } while (validation == false);

            do {
                System.out.printf("Year: ");
                yearS = kb.nextLine();
                if (yearS.isEmpty()) {
                    validation = false;
                    System.out.println("\nPlease fill in the year ");
                } else if (validation == false) {
                    validation = validateYear(yearS);
                    if (validation == false) {
                        System.out.println("\nInvalid Date Format");
                    }
                }
            } while (validation == false);

            day = Integer.parseInt(dayS);
            month = Integer.parseInt(monthS);
            year = Integer.parseInt(yearS);
            LocalDate date = LocalDate.of(year, month, day);
            if (validation == true) {
                System.out.println("\n                   Order History                  ");
                System.out.print("---------------------------------------------------\n");
                System.out.println("===================================================");
                System.out.println("= Order ID |   Status  |    Date    | Total Price =");
                System.out.println("===================================================");
                for (Order order : orderList) {
                    if (order.date.isEqual(date)) {
                        System.out.printf("=   %4s   | %9s | %tF |   RM%6.2f  =\n", order.id, order.status, order.date, order.totalPrice);
                        found = true;
                    }
                }
                if (found == false) {
                    System.out.println("=               No record found!!!                =");
                }
                System.out.println("===================================================");
            } else {
                System.out.println("Please enter a ");
            }
        }
    }

    public static boolean validateDay(String day) {

        int dayI = Integer.parseInt(day);

        if (dayI <= 0 || dayI > 31) {
            return false;
        }
        //check are all digits?
        for (int i = 0; i < day.length(); i++) {
            if (Character.isDigit(day.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }

    public static boolean validateMonth(String day, String month) {

        int monthI = Integer.parseInt(month);
        int dayI = Integer.parseInt(day);

        if (monthI < 0 || monthI > 12) {
            return false;
        }

        if (monthI == 2) {
            if (dayI > 28) {
                return false;
            }
        } else if (monthI == 4 || monthI == 6 || monthI == 9 || monthI == 11) {
            if (dayI == 31) {
                return false;
            }
        }

        //check are all digits?
        for (int i = 0; i < month.length(); i++) {
            if (Character.isDigit(month.charAt(i)) == false) {
                return false;
            }
        }

        return true;
    }

    public static boolean validateYear(String year) {

        //check length
        if (year.length() != 4) {
            return false;
        }

        //check are all digits?
        for (int i = 0; i < year.length(); i++) {
            if (Character.isDigit(year.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }

    public static void viewOrderhistory(List<Order> orderList) {
        int number = 1;
        String stringMonth = "";
        LocalDate today = LocalDate.now();

        if (!orderList.isEmpty()) {
            System.out.println("    View Order History by Month within year 2023   ");
            System.out.println("---------------------------------------------------");

            do {
                int record = 0;
                switch (number) {
                    case 1:
                        stringMonth = "January";
                        break;
                    case 2:
                        stringMonth = "February";
                        break;
                    case 3:
                        stringMonth = "March";
                        break;
                    case 4:
                        stringMonth = "April";
                        break;
                    case 5:
                        stringMonth = "May";
                        break;
                    case 6:
                        stringMonth = "June";
                        break;
                    case 7:
                        stringMonth = "July";
                        break;
                    case 8:
                        stringMonth = "August";
                        break;
                    case 9:
                        stringMonth = "September";
                        break;
                    case 10:
                        stringMonth = "October";
                        break;
                    case 11:
                        stringMonth = "November";
                        break;
                    case 12:
                        stringMonth = "December";
                        break;

                }

                System.out.println("\n===================================================");
                System.out.printf("=                 Month: %-10s               =\n", stringMonth);
                System.out.println("===================================================");
                System.out.println("= Order ID |   Status  |    Date    | Total Price =");
                System.out.println("===================================================");
                for (Order order : orderList) {
                    int month = order.date.getMonthValue();
                    int year = order.date.getYear();
                    if (number == month && year == 2023) {
                        System.out.printf("=   %4s   | %9s | %tF |   RM%6.2f  =\n", order.id, order.status, order.date, order.totalPrice);
                        record++;
                    }
                }

                if (record == 0) {
                    System.out.println("=       There is no any record in this month      =");

                }
                System.out.println("===================================================\n");
                number++;

            } while (number <= today.getMonthValue());
        } else {
            System.out.println("\t    There is no any order made");
        }
    }

    //to iniatial the existed record
    public static void initialFood(List<Item> foodList) {
        Item food1 = new Item("F001", "Fry Rice", 13.5, "Food");
        Item food2 = new Item("F002", "Chicken Rice", 22.5, "Food");
        Item food3 = new Item("F003", "Mee Goreng", 10.0, "Food");
        Item beverage1 = new Item("B001", "Green tea", 2.5, "Beverage");
        Item beverage2 = new Item("B002", "Lemon juice", 6.5, "Beverage");
        Item beverage3 = new Item("B003", "Bubble tea", 8.5, "Beverage");
        Item dessert1 = new Item("D001", "Oreo Cake", 11.9, "Dessert");
        Item dessert2 = new Item("D002", "Baked cheesecake", 13.9, "Dessert");
        Item dessert3 = new Item("D003", "Matcha Cake", 11.9, "Dessert");

        food2.setAvailability(Boolean.FALSE);
        beverage2.setAvailability(Boolean.FALSE);

        foodList.add(food1);
        foodList.add(food2);
        foodList.add(food3);
        foodList.add(beverage1);
        foodList.add(beverage2);
        foodList.add(beverage3);
        foodList.add(dessert1);
        foodList.add(dessert2);
        foodList.add(dessert3);
    }

    public static void initialOrder(List<Order> orderList, List<Item> foodList) {
        OrderItem items1 = new OrderItem(foodList.get(2), 2);
        OrderItem items2 = new OrderItem(foodList.get(1), 1);
        OrderItem items3 = new OrderItem(foodList.get(0), 1);
        OrderItem items4 = new OrderItem(foodList.get(2), 1);
        OrderItem items5 = new OrderItem(foodList.get(3), 3);
        OrderItem items6 = new OrderItem(foodList.get(4), 1);
        OrderItem items7 = new OrderItem(foodList.get(0), 1);
        OrderItem items8 = new OrderItem(foodList.get(4), 2);
        OrderItem items9 = new OrderItem(foodList.get(3), 1);
        OrderItem items10 = new OrderItem(foodList.get(1), 2);

        List<OrderItem> list1 = new ArrayList<>();
        List<OrderItem> list2 = new ArrayList<>();
        List<OrderItem> list3 = new ArrayList<>();
        List<OrderItem> list4 = new ArrayList<>();
        List<OrderItem> list5 = new ArrayList<>();
        List<OrderItem> list6 = new ArrayList<>();
        List<OrderItem> list7 = new ArrayList<>();
        List<OrderItem> list8 = new ArrayList<>();
        List<OrderItem> list9 = new ArrayList<>();
        List<OrderItem> list10 = new ArrayList<>();

        list1.add(items1);
        list1.add(items2);
        list2.add(items3);
        list2.add(items4);
        list2.add(items5);
        list3.add(items6);
        list3.add(items7);
        list3.add(items8);
        list4.add(items9);
        list4.add(items10);
        list5.add(items1);
        list5.add(items2);
        list5.add(items3);
        list6.add(items6);
        list6.add(items5);
        list6.add(items4);
        list7.add(items4);
        list7.add(items5);
        list7.add(items6);
        list7.add(items7);
        list8.add(items5);
        list9.add(items9);
        list9.add(items10);
        list10.add(items1);
        list10.add(items10);

        Order order1 = new Order("O001", list1, "Completed", LocalDate.of(2023, 1, 4));
        Order order2 = new Order("O002", list2, "Cancelled", LocalDate.of(2023, 1, 26));
        Order order3 = new Order("O003", list3, "Completed", LocalDate.of(2023, 3, 22));
        Order order4 = new Order("O004", list4, "Preparing", LocalDate.of(2023, 3, 22));
        Order order5 = new Order("O005", list5, "Preparing", LocalDate.of(2023, 10, 9));
        Order order6 = new Order("O006", list6, "Preparing", LocalDate.of(2023, 6, 12));
        Order order7 = new Order("O007", list7, "Completed", LocalDate.of(2023, 12, 21));
        Order order8 = new Order("O008", list8, "Preparing", LocalDate.of(2023, 8, 15));
        Order order9 = new Order("O009", list9, "Completed", LocalDate.of(2023, 8, 8));
        Order order10 = new Order("O010", list10, "Cancelled", LocalDate.of(2023, 9, 17));

        orderList.add(order1);
        orderList.add(order2);
        orderList.add(order3);
        orderList.add(order4);
        orderList.add(order5);
        orderList.add(order6);
        orderList.add(order7);
        orderList.add(order8);
        orderList.add(order9);
        orderList.add(order10);

    }
}
